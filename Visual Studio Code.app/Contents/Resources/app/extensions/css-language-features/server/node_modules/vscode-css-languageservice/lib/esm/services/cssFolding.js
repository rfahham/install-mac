/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
import { TokenType, Scanner } from '../parser/cssScanner';
import { SCSSScanner, InterpolationFunction } from '../parser/scssScanner';
import { LESSScanner } from '../parser/lessScanner';
export function getFoldingRegions(document) {
    function getStartLine(t) {
        return document.positionAt(t.offset).line;
    }
    function getEndLine(t) {
        return document.positionAt(t.offset + t.len).line;
    }
    function getScanner() {
        switch (document.languageId) {
            case 'scss':
                return new SCSSScanner();
            case 'less':
                return new LESSScanner();
            default:
                return new Scanner();
        }
    }
    function tokenToRange(t, type) {
        var startLine = getStartLine(t);
        var endLine = getEndLine(t);
        if (startLine !== endLine) {
            return {
                startLine: startLine,
                endLine: endLine,
                type: type
            };
        }
        else {
            return null;
        }
    }
    var ranges = [];
    var stack = [];
    var scanner = getScanner();
    scanner.ignoreComment = false;
    scanner.setSource(document.getText());
    var token = scanner.scan();
    var prevToken;
    while (token.type !== TokenType.EOF) {
        switch (token.type) {
            case TokenType.CurlyL:
            case InterpolationFunction:
                {
                    stack.push(getStartLine(token));
                    break;
                }
            case TokenType.CurlyR: {
                if (stack.length !== 0) {
                    var startLine = stack.pop();
                    var endLine = getEndLine(token);
                    /**
                     * Other than the case when curly brace is not on a new line by itself, for example
                     * .foo {
                     *   color: red; }
                     * Use endLine minus one to show ending curly brace
                     */
                    if (getEndLine(prevToken) !== endLine) {
                        endLine--;
                    }
                    if (startLine !== endLine) {
                        ranges.push({
                            startLine: startLine,
                            endLine: endLine,
                            type: undefined
                        });
                    }
                    break;
                }
            }
            /**
             * In CSS, there is no single line comment prefixed with //
             * All comments are marked as `Comment`
             */
            case TokenType.Comment: {
                var range = tokenToRange(token, 'comment');
                if (range) {
                    ranges.push(range);
                }
                break;
            }
        }
        prevToken = token;
        token = scanner.scan();
    }
    return {
        ranges: ranges
    };
}
//# sourceMappingURL=cssFolding.js.map